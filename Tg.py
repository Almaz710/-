# -*- coding: utf-8 -*-
import logging
import sqlite3
import re
from datetime import datetime, timedelta

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters,
    ConversationHandler, CallbackContext
)

# -------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ --------
TOKEN = "7581280110:AAHnqkCVJGjqBvHD1gU4dl8CsSA0eHOPsRg"  # <-- –í–°–¢–ê–í–¨ –°–í–û–ô –¢–û–ö–ï–ù
DB_PATH = "finance.db"

# -------- –°–æ—Å—Ç–æ—è–Ω–∏—è --------
EXPENSE, INCOME = range(2)

# -------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ --------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
log = logging.getLogger(__name__)

# -------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------
main_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üì© Add income"), KeyboardButton("üì§ Add expense")],
        [KeyboardButton("üí∞ Balance"), KeyboardButton("üìÖ Today")],
        [KeyboardButton("üß† Analyze"), KeyboardButton("üìä Categories")],
        [KeyboardButton("‚ùå Cancel")],
    ],
    resize_keyboard=True
)

conv_cancel_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("‚ùå Cancel")]],
    resize_keyboard=True, one_time_keyboard=True
)

# -------- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è + –º–∏–≥—Ä–∞—Ü–∏—è) --------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()

    # —Å–æ–∑–¥–∞—ë–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
    c.execute("""
        CREATE TABLE IF NOT EXISTS expenses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            amount INTEGER NOT NULL,
            category TEXT NOT NULL,
            timestamp TEXT NOT NULL
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS income (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            amount INTEGER NOT NULL,
            category TEXT NOT NULL,
            date TEXT NOT NULL
        )
    """)

    # --- –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã expenses (–±–µ–∑ user_id/timestamp) ---
    try:
        cols = {row[1] for row in c.execute("PRAGMA table_info(expenses)")}
        if "user_id" not in cols:
            c.execute("ALTER TABLE expenses ADD COLUMN user_id INTEGER")
        if "timestamp" not in cols:
            c.execute("ALTER TABLE expenses ADD COLUMN timestamp TEXT")
    except Exception as e:
        log.exception("Migration check failed: %s", e)

    conn.commit()
    conn.close()

# -------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ --------
def _normalize_spaces(s: str) -> str:
    # –∑–∞–º–µ–Ω—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ/—É–∑–∫–∏–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–±—ã—á–Ω—ã–π
    return (s or "").replace("\u00A0", " ").replace("\u202F", " ").replace("\u2009", " ")

# -------- –•—ç–Ω–¥–ª–µ—Ä—ã --------
def start(update: Update, context: CallbackContext):
    update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

# ---- –†–∞—Å—Ö–æ–¥—ã ----
def add_expense(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 500 –ø—è—Ç–µ—Ä–æ—á–∫–∞",
        reply_markup=conv_cancel_keyboard
    )
    return EXPENSE

def save_expense(update: Update, context: CallbackContext):
    text = _normalize_spaces(update.message.text).strip()
    # –†–∞–∑—Ä–µ—à–∞–µ–º: "500 –ª–µ–Ω—Ç–∞", "500.00 –ª–µ–Ω—Ç–∞", "500,50 –ª–µ–Ω—Ç–∞"
    m = re.match(r"^\s*(\d+)(?:[.,](\d{1,2}))?\s+(.+?)\s*$", text)
    if not m:
        update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 500 –ø—è—Ç–µ—Ä–æ—á–∫–∞")
        return EXPENSE

    amount = int(m.group(1))  # –∫–æ–ø–µ–π–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º; –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —Ü–µ–ª—ã–µ –∫–æ–ø–µ–π–∫–∏
    category = m.group(3).lower()

    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute(
            "INSERT INTO expenses (user_id, amount, category, timestamp) VALUES (?, ?, ?, ?)",
            (update.effective_user.id, amount, category, datetime.now().isoformat())
        )
        conn.commit()
        conn.close()
    except Exception as e:
        log.exception("DB error on save_expense: %s", e)
        update.message.reply_text("üí• –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return EXPENSE

    update.message.reply_text(
        f"‚úÖ –†–∞—Å—Ö–æ–¥ {amount} ‚ÇΩ –Ω–∞ ¬´{category}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
        reply_markup=main_keyboard
    )
    return ConversationHandler.END

# ---- –î–æ—Ö–æ–¥—ã ----
def add_income(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: 10000 —Ä–∞–±–æ—Ç–∞",
        reply_markup=conv_cancel_keyboard
    )
    return INCOME

def save_income(update: Update, context: CallbackContext):
    text = _normalize_spaces(update.message.text).strip()
    parts = text.split(maxsplit=1)

    if len(parts) != 2 or not parts[0].isdigit():
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 10000 —Ä–∞–±–æ—Ç–∞")
        return INCOME

    amount = int(parts[0])
    category = parts[1].lower()
    date = datetime.now().strftime("%Y-%m-%d")

    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute(
            "INSERT INTO income (user_id, amount, category, date) VALUES (?, ?, ?, ?)",
            (update.effective_user.id, amount, category, date)
        )
        conn.commit()
        conn.close()
    except Exception as e:
        log.exception("DB error on save_income: %s", e)
        update.message.reply_text("üí• –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return INCOME

    update.message.reply_text(
        f"‚úÖ –î–æ—Ö–æ–¥ {amount} ‚ÇΩ –æ—Ç ¬´{category}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
        reply_markup=main_keyboard
    )
    return ConversationHandler.END

# ---- –û—Ç–º–µ–Ω–∞ ----
def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
    return ConversationHandler.END

# ---- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ----
def get_stats(period_days: int, user_id: int) -> str:
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    since = datetime.now() - timedelta(days=period_days)
    c.execute(
        "SELECT category, SUM(amount) FROM expenses WHERE user_id = ? AND timestamp > ? GROUP BY category",
        (user_id, since.isoformat())
    )
    rows = c.fetchall()
    conn.close()
    if not rows:
        return "–ù–µ—Ç —Ç—Ä–∞—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
    return "\n".join([f"{(cat or '').capitalize()}: {amt} ‚ÇΩ" for cat, amt in rows])

def categories(update: Update, context: CallbackContext):
    kb = ReplyKeyboardMarkup(
        [
            [KeyboardButton("üìÖ Today"), KeyboardButton("üóì Week")],
            [KeyboardButton("üìÜ Month"), KeyboardButton("‚¨ÖÔ∏è Back")],
            [KeyboardButton("‚ùå Cancel")],
        ],
        resize_keyboard=True
    )
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb)

def today_categories(update: Update, context: CallbackContext):
    update.message.reply_text(f"üìÖ –°–µ–≥–æ–¥–Ω—è:\n{get_stats(1, update.effective_user.id)}")

def week_categories(update: Update, context: CallbackContext):
    update.message.reply_text(f"üóì –ó–∞ –Ω–µ–¥–µ–ª—é:\n{get_stats(7, update.effective_user.id)}")

def month_categories(update: Update, context: CallbackContext):
    update.message.reply_text(f"üìÜ –ó–∞ –º–µ—Å—è—Ü:\n{get_stats(30, update.effective_user.id)}")

# ---- –ë–∞–ª–∞–Ω—Å ----
def balance(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT COALESCE(SUM(amount),0) FROM expenses WHERE user_id = ?", (user_id,))
    total_expenses = c.fetchone()[0] or 0
    c.execute("SELECT COALESCE(SUM(amount),0) FROM income WHERE user_id = ?", (user_id,))
    total_income = c.fetchone()[0] or 0
    conn.close()

    net = total_income - total_expenses
    update.message.reply_text(f"üí∞ –î–æ—Ö–æ–¥—ã: {total_income} ‚ÇΩ\nüí∏ –†–∞—Å—Ö–æ–¥—ã: {total_expenses} ‚ÇΩ\nüßæ –ë–∞–ª–∞–Ω—Å: {net} ‚ÇΩ")

# ---- –ê–Ω–∞–ª–∏–∑ (–∑–∞–≥–ª—É—à–∫–∞) ----
def analyze(update: Update, context: CallbackContext):
    update.message.reply_text("üß† –ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=main_keyboard)

# ---- –§–æ–ª–±—ç–∫ ----
def handle_text(update: Update, context: CallbackContext):
    update.message.reply_text("‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", reply_markup=main_keyboard)

# -------- main --------
def main():
    init_db()

    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # –ö–æ–Ω–≤–µ—Ä—Å–µ–π—à–Ω: —Ä–∞—Å—Ö–æ–¥—ã
    expense_conv = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex(r"(?i)^üì§ Add expense$"), add_expense)],
        states={EXPENSE: [MessageHandler(Filters.text & ~Filters.command, save_expense)]},
        fallbacks=[
            MessageHandler(Filters.regex(r"(?i)^‚ùå Cancel$"), cancel),
            CommandHandler("cancel", cancel)
        ],
        per_chat=True
    )

    # –ö–æ–Ω–≤–µ—Ä—Å–µ–π—à–Ω: –¥–æ—Ö–æ–¥—ã
    income_conv = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex(r"(?i)^üì© Add income$"), add_income)],
        states={INCOME: [MessageHandler(Filters.text & ~Filters.command, save_income)]},
        fallbacks=[
            MessageHandler(Filters.regex(r"(?i)^‚ùå Cancel$"), cancel),
            CommandHandler("cancel", cancel)
        ],
        per_chat=True
    )

    # –ö–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.regex(r"(?i)^üìä Categories$"), categories))
    dp.add_handler(MessageHandler(Filters.regex(r"(?i)^üìÖ Today$"), today_categories))
    dp.add_handler(MessageHandler(Filters.regex(r"(?i)^üóì Week$"), week_categories))
    dp.add_handler(MessageHandler(Filters.regex(r"(?i)^üìÜ Month$"), month_categories))
    dp.add_handler(MessageHandler(Filters.regex(r"(?i)^üí∞ Balance$"), balance))
    dp.add_handler(MessageHandler(Filters.regex(r"(?i)^üß† Analyze$"), analyze))

    # Cancel –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞/–∫–æ–º–∞–Ω–¥–∞
    dp.add_handler(MessageHandler(Filters.regex(r"(?i)^‚ùå Cancel$"), cancel))
    dp.add_handler(CommandHandler("cancel", cancel))

    # –ö–æ–Ω–≤–µ—Ä—Å–µ–π—à–Ω—ã
    dp.add_handler(expense_conv)
    dp.add_handler(income_conv)

    # –§–æ–ª–±—ç–∫
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
