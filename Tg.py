# -*- coding: utf-8 -*-
import os
import re
import logging
from datetime import datetime, timedelta, timezone

import psycopg2
from psycopg2.extras import RealDictCursor

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters,
    ConversationHandler, CallbackContext
)

# -------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ --------
TOKEN = os.environ["TOKEN"]                 # —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ Railway Variables
DATABASE_URL = os.environ["DATABASE_URL"]   # —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Postgres –Ω–∞ Railway

# -------- –°–æ—Å—Ç–æ—è–Ω–∏—è --------
EXPENSE, INCOME = range(2)

# -------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ --------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
log = logging.getLogger(__name__)

# -------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------
main_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üì© Add income"), KeyboardButton("üì§ Add expense")],
        [KeyboardButton("üí∞ Balance"), KeyboardButton("üìÖ Today")],
        [KeyboardButton("üß† Analyze"), KeyboardButton("üìä Categories")],
        [KeyboardButton("üóÇ History")],  # <-- –¥–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫—É –∏—Å—Ç–æ—Ä–∏–∏
        [KeyboardButton("‚ùå Cancel")],
    ],
    resize_keyboard=True
)

conv_cancel_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("‚ùå Cancel")]],
    resize_keyboard=True, one_time_keyboard=True
)

# -------- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î --------
def pg_conn():
    # Railway —Ç—Ä–µ–±—É–µ—Ç SSL
    return psycopg2.connect(DATABASE_URL, sslmode="require")

def init_db():
    with pg_conn() as conn, conn.cursor() as c:
        c.execute("""
            CREATE TABLE IF NOT EXISTS expenses (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                amount INTEGER NOT NULL,
                category TEXT NOT NULL,
                timestamp TIMESTAMPTZ NOT NULL
            );
        """)
        c.execute("""
            CREATE TABLE IF NOT EXISTS income (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                amount INTEGER NOT NULL,
                category TEXT NOT NULL,
                date DATE NOT NULL
            );
        """)
        conn.commit()

# -------- –£—Ç–∏–ª–∏—Ç—ã --------
def _normalize_spaces(s: str) -> str:
    return (s or "").replace("\u00A0", " ").replace("\u202F", " ").replace("\u2009", " ")

# -------- –•—ç–Ω–¥–ª–µ—Ä—ã --------
def start(update: Update, context: CallbackContext):
    update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

# ---- –†–∞—Å—Ö–æ–¥—ã ----
def add_expense(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 500 –ø—è—Ç–µ—Ä–æ—á–∫–∞",
        reply_markup=conv_cancel_keyboard
    )
    return EXPENSE

def save_expense(update: Update, context: CallbackContext):
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    text = _normalize_spaces(update.message.text).strip()
    if text in ("üì§ Add expense", "üì© Add income", "‚ùå Cancel", "üóÇ History"):
        return EXPENSE

    m = re.match(r"^\s*(\d+)(?:[.,](\d{1,2}))?\s+(.+?)\s*$", text)
    if not m:
        update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 500 –ø—è—Ç–µ—Ä–æ—á–∫–∞")
        return EXPENSE

    amount = int(m.group(1))
    category = m.group(3).lower()
    now = datetime.now(timezone.utc)

    try:
        with pg_conn() as conn, conn.cursor() as c:
            c.execute(
                "INSERT INTO expenses (user_id, amount, category, timestamp) VALUES (%s, %s, %s, %s)",
                (update.effective_user.id, amount, category, now)
            )
            conn.commit()
    except Exception as e:
        log.exception("DB error on save_expense: %s", e)
        update.message.reply_text("üí• –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return EXPENSE

    update.message.reply_text(
        f"‚úÖ –†–∞—Å—Ö–æ–¥ {amount} ‚ÇΩ –Ω–∞ ¬´{category}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
        reply_markup=main_keyboard
    )
    return ConversationHandler.END

# ---- –î–æ—Ö–æ–¥—ã ----
def add_income(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: 10000 —Ä–∞–±–æ—Ç–∞",
        reply_markup=conv_cancel_keyboard
    )
    return INCOME

def save_income(update: Update, context: CallbackContext):
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    text = _normalize_spaces(update.message.text).strip()
    if text in ("üì§ Add expense", "üì© Add income", "‚ùå Cancel", "üóÇ History"):
        return INCOME

    parts = text.split(maxsplit=1)
    if len(parts) != 2 or not parts[0].isdigit():
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 10000 —Ä–∞–±–æ—Ç–∞")
        return INCOME

    amount = int(parts[0])
    category = parts[1].lower()
    date = datetime.now(timezone.utc).date()

    try:
        with pg_conn() as conn, conn.cursor() as c:
            c.execute(
                "INSERT INTO income (user_id, amount, category, date) VALUES (%s, %s, %s, %s)",
                (update.effective_user.id, amount, category, date)
            )
            conn.commit()
    except Exception as e:
        log.exception("DB error on save_income: %s", e)
        update.message.reply_text("üí• –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return INCOME

    update.message.reply_text(
        f"‚úÖ –î–æ—Ö–æ–¥ {amount} ‚ÇΩ –æ—Ç ¬´{category}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
        reply_markup=main_keyboard
    )
    return ConversationHandler.END

# ---- –ò—Å—Ç–æ—Ä–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ ----
def history(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    limit = 20  # —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å

    with pg_conn() as conn, conn.cursor() as c:
        c.execute(
            """
            SELECT t, id, amount, category, ts
            FROM (
                SELECT 'E'::text AS t, id, amount, category, timestamp AS ts
                FROM expenses
                WHERE user_id = %s
                UNION ALL
                SELECT 'I'::text AS t, id, amount, category, date::timestamptz AS ts
                FROM income
                WHERE user_id = %s
            ) AS u
            ORDER BY ts DESC
            LIMIT %s
            """,
            (user_id, user_id, limit)
        )
        rows = c.fetchall()

    if not rows:
        update.message.reply_text("üóÇ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    lines = []
    for t, _id, amount, category, ts in rows:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º UTC ‚Äî –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π TZ
        dt_str = ts.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M")
        if t == 'E':
            lines.append(f"üßæ E{_id} ¬∑ {dt_str} ¬∑ -{amount} ‚ÇΩ ¬∑ {category}")
        else:
            lines.append(f"üíµ I{_id} ¬∑ {dt_str} ¬∑ +{amount} ‚ÇΩ ¬∑ {category}")

    msg = "üóÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (—É–¥–∞–ª–µ–Ω–∏–µ: /delete <–∫–æ–¥>):\n" + "\n".join(lines)
    update.message.reply_text(msg)

def delete_entry(update: Update, context: CallbackContext):
    # –æ–∂–∏–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –≤–∏–¥–∞ E123 –∏–ª–∏ I45
    if not context.args:
        update.message.reply_text("–£–∫–∞–∂–∏ –∫–æ–¥ –∑–∞–ø–∏—Å–∏. –ü—Ä–∏–º–µ—Ä: /delete E123")
        return

    code = context.args[0].strip().upper()
    m = re.match(r"^([EI])(\d+)$", code)
    if not m:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /delete E123 –∏–ª–∏ /delete I45")
        return

    t, id_str = m.group(1), m.group(2)
    rec_id = int(id_str)
    user_id = update.effective_user.id

    with pg_conn() as conn, conn.cursor() as c:
        if t == 'E':
            c.execute(
                "DELETE FROM expenses WHERE id = %s AND user_id = %s RETURNING amount, category",
                (rec_id, user_id)
            )
        else:
            c.execute(
                "DELETE FROM income WHERE id = %s AND user_id = %s RETURNING amount, category",
                (rec_id, user_id)
            )
        row = c.fetchone()
        conn.commit()

    if row:
        amount, category = row
        sign = "-" if t == "E" else "+"
        emoji = "üßæ" if t == "E" else "üíµ"
        update.message.reply_text(f"{emoji} –ó–∞–ø–∏—Å—å {code} —É–¥–∞–ª–µ–Ω–∞: {sign}{amount} ‚ÇΩ ¬∑ {category}")
    else:
        update.message.reply_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")

# ---- –û—Ç–º–µ–Ω–∞ ----
def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
    return ConversationHandler.END

# ---- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ----
def get_stats(period_days: int, user_id: int) -> str:
    since = datetime.now(timezone.utc) - timedelta(days=period_days)
    with pg_conn() as conn, conn.cursor() as c:
        c.execute(
            """
            SELECT category, SUM(amount)::INT
            FROM expenses
            WHERE user_id = %s AND timestamp > %s
            GROUP BY category
            ORDER BY SUM(amount) DESC
            """,
            (user_id, since)
        )
        rows = c.fetchall()
    if not rows:
        return "–ù–µ—Ç —Ç—Ä–∞—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
    return "\n".join([f"{(cat or '').capitalize()}: {amt} ‚ÇΩ" for (cat, amt) in rows])

def categories(update: Update, context: CallbackContext):
    kb = ReplyKeyboardMarkup(
        [
            [KeyboardButton("üìÖ Today"), KeyboardButton("üóì Week")],
            [KeyboardButton("üìÜ Month"), KeyboardButton("‚¨ÖÔ∏è Back")],
            [KeyboardButton("‚ùå Cancel")],
        ],
        resize_keyboard=True
    )
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb)

def today_categories(update: Update, context: CallbackContext):
    update.message.reply_text(f"üìÖ –°–µ–≥–æ–¥–Ω—è:\n{get_stats(1, update.effective_user.id)}")

def week_categories(update: Update, context: CallbackContext):
    update.message.reply_text(f"üóì –ó–∞ –Ω–µ–¥–µ–ª—é:\n{get_stats(7, update.effective_user.id)}")

def month_categories(update: Update, context: CallbackContext):
    update.message.reply_text(f"üìÜ –ó–∞ –º–µ—Å—è—Ü:\n{get_stats(30, update.effective_user.id)}")

# ---- –ë–∞–ª–∞–Ω—Å ----
def balance(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    with pg_conn() as conn, conn.cursor() as c:
        c.execute("SELECT COALESCE(SUM(amount),0)::INT FROM expenses WHERE user_id = %s", (user_id,))
        total_expenses = c.fetchone()[0] or 0
        c.execute("SELECT COALESCE(SUM(amount),0)::INT FROM income   WHERE user_id = %s", (user_id,))
        total_income = c.fetchone()[0] or 0
    net = total_income - total_expenses
    update.message.reply_text(f"üí∞ –î–æ—Ö–æ–¥—ã: {total_income} ‚ÇΩ\nüí∏ –†–∞—Å—Ö–æ–¥—ã: {total_expenses} ‚ÇΩ\nüßæ –ë–∞–ª–∞–Ω—Å: {net} ‚ÇΩ")

# ---- –ê–Ω–∞–ª–∏–∑ (–∑–∞–≥–ª—É—à–∫–∞) ----
def analyze(update: Update, context: CallbackContext):
    update.message.reply_text("üß† –ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=main_keyboard)

# ---- –§–æ–ª–±—ç–∫ ----
def handle_text(update: Update, context: CallbackContext):
    update.message.reply_text("‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", reply_markup=main_keyboard)

# -------- main --------
def main():
    init_db()

    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # --- —Ñ–∏–ª—å—Ç—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–∏–Ω–∏–º–∞—é—Ç —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —Ü–∏—Ñ—Ä—ã + –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Cancel ---
    expense_conv = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex(r"(?i)^üì§ Add expense$"), add_expense)],
        states={
            EXPENSE: [
                MessageHandler(Filters.regex(r"^\s*\d") & ~Filters.command, save_expense),
                MessageHandler(Filters.regex(r"(?i)^‚ùå Cancel$"), cancel),
            ],
        },
        fallbacks=[
            MessageHandler(Filters.regex(r"(?i)^‚ùå Cancel$"), cancel),
            CommandHandler("cancel", cancel),
        ],
        per_chat=True,
    )

    income_conv = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex(r"(?i)^üì© Add income$"), add_income)],
        states={
            INCOME: [
                MessageHandler(Filters.regex(r"^\s*\d") & ~Filters.command, save_income),
                MessageHandler(Filters.regex(r"(?i)^‚ùå Cancel$"), cancel),
            ],
        },
        fallbacks=[
            MessageHandler(Filters.regex(r"(?i)^‚ùå Cancel$"), cancel),
            CommandHandler("cancel", cancel),
        ],
        per_chat=True,
    )

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.regex(r"(?i)^üìä Categories$"), categories))
    dp.add_handler(MessageHandler(Filters.regex(r"(?i)^üìÖ Today$"), today_categories))
    dp.add_handler(MessageHandler(Filters.regex(r"(?i)^üóì Week$"), week_categories))
    dp.add_handler(MessageHandler(Filters.regex(r"(?i)^üìÜ Month$"), month_categories))
    dp.add_handler(MessageHandler(Filters.regex(r"(?i)^üí∞ Balance$"), balance))
    dp.add_handler(MessageHandler(Filters.regex(r"(?i)^üß† Analyze$"), analyze))

    # –ò—Å—Ç–æ—Ä–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ
    dp.add_handler(CommandHandler("history", history))
    dp.add_handler(MessageHandler(Filters.regex(r"(?i)^üóÇ History$"), history))
    dp.add_handler(CommandHandler("delete", delete_entry))

    dp.add_handler(expense_conv)
    dp.add_handler(income_conv)

    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
